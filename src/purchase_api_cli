from argparse import ArgumentParser
from datetime import datetime
from utils import get_csv_data, check_data, post_customers

def get_parser():
    parser = ArgumentParser(description='Request API with CSV')
    parser.add_argument('customer_file', type=str, help='Customer file in CSV format')
    parser.add_argument('purchase_file', type=str, help='Purchase file in CSV format')
    parser.add_argument('api_url', type=str)
    return parser

def get_customer_payload(customer_file, purchase_file, customer_id=None):   
    salutations = {1: 'Mrs', 2: 'Mr'}
    customers = {}
    customers_data = get_csv_data(customer_file)
    purchases_data = get_csv_data(purchase_file)
    
    for customer in customers_data:
        customer_id = customer.get('customer_id')
        if customer_id:
            customers[customer_id]={
                'salutation': salutations[int(customer.get('title'))],
                'lastname': customer.get('lastname'),
                'firstname': customer.get('firstname'),
                'postal_code': customer.get('postal_code'),
                'city': customer.get('city'),
                'email': customer.get('email'),
                'purchases': []
            }

    # Attach purchases to customers
    for purchase in purchases_data:
        customer_id = purchase.get('customer_id')
        if customer_id in customers:
            customers[customer_id]['purchases'].append({
                # 'purchase_identifier': purchase.get('purchase_identifier'),
                'product_id': purchase.get('product_id'),
                'quantity': int(purchase.get('quantity')),
                'price': float(purchase.get('price')),
                'currency': purchase.get('currency'),
                'purchased_at': str(datetime.strptime(purchase.get('date'), '%Y-%m-%d').date())
            })
    
    return list(customers.values())


def main():
    parser = get_parser()
    args = parser.parse_args()
    payload = get_customer_payload(args.customer_file, args.purchase_file)
    if(check_data(payload)):
        try:
            response = post_customers(args.api_url, payload)
            print("Response", response)
        except Exception as e:
            print("ConnectionError:", str(e))
    else:
        raise TypeError("Invalid data format")
    
if __name__ == '__main__':
    main()
    